diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
index eb1ee9e2b868fa06af4ed88e1d54583cd4196880..de15d451f90a150874c0ffbba72ac9c7b9307e15 100644
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -2,10 +2,14 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+
 /**
  * SidebarUI controls showing and hiding the browser sidebar.
  */
 var SidebarUI = {
+  /**
+   * @returns {Map<string, { title: string, url?: string, onclick?: string, menuId?: string, triggerButtonId?: string, iconurl: string, isBottom: boolean }>}
+   */
   get sidebars() {
     if (this._sidebars) {
       return this._sidebars;
@@ -19,6 +23,8 @@ var SidebarUI = {
             .getAttribute("label"),
           url: "chrome://browser/content/places/bookmarksSidebar.xhtml",
           menuId: "menu_bookmarksSidebar",
+          iconurl: "chrome://global/skin/icons/bookmark-outline.svg",
+          isBottom: false,
         },
       ],
       [
@@ -30,6 +36,8 @@ var SidebarUI = {
           url: "chrome://browser/content/places/historySidebar.xhtml",
           menuId: "menu_historySidebar",
           triggerButtonId: "appMenuViewHistorySidebar",
+          iconurl: "chrome://browser/skin/history.svg",
+          isBottom: false,
         },
       ],
       [
@@ -40,6 +48,26 @@ var SidebarUI = {
             .getAttribute("label"),
           url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
           menuId: "menu_tabsSidebar",
+          iconurl: "chrome://browser/skin/tab.svg",
+          isBottom: false,
+        },
+      ],
+      [
+        "sidebar-view-addons",
+        {
+          title: "Add-ons",
+          onclick: "BrowserOpenAddonsMgr();",
+          iconurl: "chrome://mozapps/skin/extensions/category-themes.svg",
+          isBottom: true,
+        },
+      ],
+      [
+        "sidebar-view-preferances",
+        {
+          title: "Preferences",
+          onclick: "openPreferences();",
+          iconurl: "chrome://global/skin/icons/settings.svg",
+          isBottom: true,
         },
       ],
     ]));
@@ -53,7 +81,10 @@ var SidebarUI = {
     }
     return (this._browser = document.getElementById("sidebar"));
   },
+
   POSITION_START_PREF: "sidebar.position_start",
+  SIDEBAR_TABS_PREF: "pulse.sidebar.enabled",
+  SIDEBAR_EXTENSIONS_PREF: "pulse.sidebar.extensions.enabled",
   DEFAULT_SIDEBAR_ID: "viewBookmarksSidebar",
 
   // lastOpenedId is set in show() but unlike currentID it's not cleared out on hide
@@ -71,6 +102,8 @@ var SidebarUI = {
   },
   _splitter: null,
   _icon: null,
+  _sidebarIcons: null,
+  _sidebarIconsBottom: null,
   _reversePositionButton: null,
   _switcherPanel: null,
   _switcherTarget: null,
@@ -91,6 +124,10 @@ var SidebarUI = {
     this._box = document.getElementById("sidebar-box");
     this._splitter = document.getElementById("sidebar-splitter");
     this._icon = document.getElementById("sidebar-icon");
+
+    this._sidebarIcons = document.getElementById("sidebar-icons");
+    this._sidebarIconsBottom = document.getElementById("sidebar-icons-bottom");
+
     this._reversePositionButton = document.getElementById(
       "sidebar-reverse-position"
     );
@@ -102,9 +139,59 @@ var SidebarUI = {
       this.toggleSwitcherPanel();
     });
 
+    const sidebaritems = this.sidebars.keys();
+    const sidebarExtensionVis = Services.prefs.getBoolPref(this.SIDEBAR_EXTENSIONS_PREF);
+
+    for (const sidebaritem of sidebaritems) {
+      if(this.sidebars.get(sidebaritem).extensionId && !sidebarExtensionVis) {
+        return;
+      }
+      this.createSidebarItem(sidebaritem, this.sidebars.get(sidebaritem), true);
+    }
+
+    //Add divider
+    const divider = document.createElement("hr")
+    divider.classList.add("sidebar-divider");
+    this._sidebarIcons.appendChild(divider);
+
+    const sidebarVisible = Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true)
+    this.setSidebarVisibility(sidebarVisible)
+
+    // Keep track on the changes of the sidebar visibility
+    Services.prefs.addObserver(this.SIDEBAR_TABS_PREF, this);
+
     this._inited = true;
 
     this._initDeferred.resolve();
+
+  },
+
+  /**
+   * Set the sidebar tabs to be visible or not visible
+   * @param {boolean} visible Sets the sidebar to be visible or not visible
+   */
+  setSidebarVisibility(visible) {
+    const sidebarContainer = document.getElementById('sidebar-container')
+
+    if (visible) {
+      sidebarContainer.style.display = 'flex'
+    } else {
+      sidebarContainer.style.display = 'none'
+    }
+  },
+
+  // nsIObserver
+
+  observe(aSubject, aTopic, aData) {
+    switch (aTopic) {
+      case "nsPref:changed":
+        switch (aData) {
+          case this.SIDEBAR_TABS_PREF:
+            this.setSidebarVisibility(Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true))
+            break
+        }
+        break;
+    }
   },
 
   uninit() {
@@ -135,6 +222,58 @@ var SidebarUI = {
     }
   },
 
+  async createSidebarItem(id, config, isinit=false) {
+    if(!isinit){
+      await this.promiseDeferred;
+    }
+    // if the sidebar item is already created, do nothing
+    if (document.getElementById(`sidebar-background-${id}`)) {
+      document.getElementById(`sidebar-background-${id}`).remove();
+    }
+
+    const background = document.createElement("div")
+    background.classList.add("sidebar-item-background")
+    background.setAttribute("id", `sidebar-background-${id}`);
+    background.onclick = () => {
+      this.toggle(id)
+    }
+    
+    const iconEl = document.createElement("image");
+    iconEl.setAttribute("id", `sidebar-icon-${id}`);
+    iconEl.setAttribute("src", `${config.iconurl}`);
+    iconEl.style.backgroundImage = `url(${config.iconurl})`;
+    
+    background.append(iconEl)
+
+    //If the item is meant to be on bottom, add it to the bottom
+    if(config.isBottom){
+      this._sidebarIconsBottom.appendChild(background);
+    }else{
+      this._sidebarIcons.appendChild(background);
+    }
+
+    //Add onclick event to the button
+    if(config.onclick){
+      background.setAttribute("onclick", config.onclick);
+    }
+
+    setTimeout(() => {
+      iconEl.setAttribute("class", "sidebar-icon-item");
+    }, 100);
+  },
+
+  deleteSidebarItem(id) {
+    const background = document.getElementById(`sidebar-background-${id}`)
+    const icon = document.getElementById(`sidebar-icon-${id}`)
+    if(background){
+      background.remove()
+    }
+    if(icon){
+      icon.remove()
+    }
+  },
+
+
   /**
    * Opens the switcher panel if it's closed, or closes it if it's open.
    */
@@ -499,6 +638,11 @@ var SidebarUI = {
   _show(commandID) {
     return new Promise(resolve => {
       this.selectMenuItem(commandID);
+      let { url, title } = this.sidebars.get(commandID);
+      if(!url) {
+        // If the sidebar is not defined, then we should not open it.
+        return;
+      }
 
       this._box.hidden = this._splitter.hidden = false;
       this.setPosition();
@@ -509,7 +653,6 @@ var SidebarUI = {
       this._box.setAttribute("sidebarcommand", commandID);
       this.lastOpenedId = commandID;
 
-      let { url, title } = this.sidebars.get(commandID);
       this.title = title;
       this.browser.setAttribute("src", url); // kick off async load
 
@@ -575,21 +718,32 @@ var SidebarUI = {
    * none if the argument is an empty string.
    */
   selectMenuItem(commandID) {
+    // Pulse modification: This needs to update both which sidebar item is
+    // checked and which dropdown item is checked. Hence, we are overriding this
+    // method.
+    
     for (let [id, { menuId, triggerButtonId }] of this.sidebars) {
+      if (!menuId) continue;
       let menu = document.getElementById(menuId);
-      let triggerbutton =
-        triggerButtonId && document.getElementById(triggerButtonId);
+      const dropdownTriggerButton = triggerButtonId && document.getElementById(triggerButtonId);
+      let sidebarTriggerButton = document.getElementById("sidebar-background-" + id);
+
+      setCheckedForItem(id, menu, sidebarTriggerButton);
+      setCheckedForItem(id, menu, dropdownTriggerButton);
+    }
+
+    function setCheckedForItem(id, menu, sidebarTriggureButton) {
       if (id == commandID) {
         menu.setAttribute("checked", "true");
-        if (triggerbutton) {
-          triggerbutton.setAttribute("checked", "true");
-          updateToggleControlLabel(triggerbutton);
+        if (sidebarTriggureButton) {
+          sidebarTriggureButton.setAttribute("checked", "true");
+          updateToggleControlLabel(sidebarTriggureButton);
         }
       } else {
         menu.removeAttribute("checked");
-        if (triggerbutton) {
-          triggerbutton.removeAttribute("checked");
-          updateToggleControlLabel(triggerbutton);
+        if (sidebarTriggureButton) {
+          sidebarTriggureButton.removeAttribute("checked");
+          updateToggleControlLabel(sidebarTriggureButton);
         }
       }
     }
