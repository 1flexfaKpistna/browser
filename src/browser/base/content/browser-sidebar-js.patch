diff --git a/browser/base/content/browser-sidebar.js b/browser/base/content/browser-sidebar.js
index 88f7ed1afbb0f25130ae9b2c6d5058da1fc3a21e..99148b161abb29cb27968339dcb1628baeae0e50 100644
--- a/browser/base/content/browser-sidebar.js
+++ b/browser/base/content/browser-sidebar.js
@@ -2,6 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+
 /**
  * SidebarUI controls showing and hiding the browser sidebar.
  */
@@ -19,6 +20,8 @@ var SidebarUI = {
             .getAttribute("label"),
           url: "chrome://browser/content/places/bookmarksSidebar.xhtml",
           menuId: "menu_bookmarksSidebar",
+          iconurl: "chrome://global/skin/icons/bookmark-outline.svg",
+          bottom: false,
         },
       ],
       [
@@ -30,6 +33,8 @@ var SidebarUI = {
           url: "chrome://browser/content/places/historySidebar.xhtml",
           menuId: "menu_historySidebar",
           triggerButtonId: "appMenuViewHistorySidebar",
+          iconurl: "chrome://browser/skin/history.svg",
+          bottom: false,
         },
       ],
       [
@@ -40,6 +45,8 @@ var SidebarUI = {
             .getAttribute("label"),
           url: "chrome://browser/content/syncedtabs/sidebar.xhtml",
           menuId: "menu_tabsSidebar",
+          iconurl: "chrome://browser/skin/tab.svg",
+          bottom: false,
         },
       ],
     ]));
@@ -53,7 +60,9 @@ var SidebarUI = {
     }
     return (this._browser = document.getElementById("sidebar"));
   },
+
   POSITION_START_PREF: "sidebar.position_start",
+  SIDEBAR_TABS_PREF: "pulse.sidebar.enabled",
   DEFAULT_SIDEBAR_ID: "viewBookmarksSidebar",
 
   // lastOpenedId is set in show() but unlike currentID it's not cleared out on hide
@@ -71,6 +80,8 @@ var SidebarUI = {
   },
   _splitter: null,
   _icon: null,
+  _sidebarIcons: null,
+  _sidebarBottomIcons: null,
   _reversePositionButton: null,
   _switcherPanel: null,
   _switcherTarget: null,
@@ -91,6 +102,10 @@ var SidebarUI = {
     this._box = document.getElementById("sidebar-box");
     this._splitter = document.getElementById("sidebar-splitter");
     this._icon = document.getElementById("sidebar-icon");
+
+    this._sidebarIcons = document.getElementById("sidebar-icons");
+    this._sidebarBottomIcons = document.getElementById("sidebar-icons-bottom");
+
     this._reversePositionButton = document.getElementById(
       "sidebar-reverse-position"
     );
@@ -102,9 +117,49 @@ var SidebarUI = {
       this.toggleSwitcherPanel();
     });
 
+    const sidebaritems = this.sidebars.keys();
+    for (const sidebaritem of sidebaritems) {
+      this.createSidebarItem(sidebaritem, this.sidebars.get(sidebaritem).iconurl, this.sidebars.get(sidebaritem));
+    }
+
+    const sidebarVisible = Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true)
+    this.setSidebarVisibility(sidebarVisible)
+
+    // Keep track on the changes of the sidebar visibility
+    Services.prefs.addObserver(this.SIDEBAR_TABS_PREF, this);
+
     this._inited = true;
 
     this._initDeferred.resolve();
+
+  },
+
+  /**
+   * Set the sidebar tabs to be visible or not visible
+   * @param {boolean} visible Sets the sidebar to be visible or not visible
+   */
+  setSidebarVisibility(visible) {
+    const sidebarContainer = document.getElementById('sidebar-container')
+
+    if (visible) {
+      sidebarContainer.style.display = 'flex'
+    } else {
+      sidebarContainer.style.display = 'none'
+    }
+  },
+
+  // nsIObserver
+
+  observe(aSubject, aTopic, aData) {
+    switch (aTopic) {
+      case "nsPref:changed":
+        switch (aData) {
+          case this.SIDEBAR_TABS_PREF:
+            this.setSidebarVisibility(Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true))
+            break
+        }
+        break;
+    }
   },
 
   uninit() {
@@ -135,6 +190,27 @@ var SidebarUI = {
     }
   },
 
+  createSidebarItem(id, icon, config) {
+    console.log(id, icon)
+    var toolbar = document.createElement("img");
+    toolbar.setAttribute("id", `sidebar-icon-${id}`);
+    toolbar.setAttribute("src", `${icon}`);
+    toolbar.onclick = () => {
+      this.toggle(id);
+    };
+    if(config.bottom){
+      this._sidebarBottomIcons.appendChild(toolbar);
+      return;
+    }
+    this._sidebarIcons.appendChild(toolbar);
+    setTimeout(() => {
+      toolbar.setAttribute("class", "sidebar-icon-item");
+    }, 100);
+  },
+
+
+
+  
   /**
    * Opens the switcher panel if it's closed, or closes it if it's open.
    */
@@ -208,14 +284,14 @@ var SidebarUI = {
   },
 
   /**
-   * Change the pref that will trigger a call to setPosition
+   * Change the Services.prefs that will trigger a call to setPosition
    */
   reversePosition() {
-    Services.prefs.setBoolPref(this.POSITION_START_PREF, !this._positionStart);
+    Services.prefss.setBoolPref(this.POSITION_START_PREF, !this._positionStart);
   },
 
   /**
-   * Read the positioning pref and position the sidebar and the splitter
+   * Read the positioning Services.prefs and position the sidebar and the splitter
    * appropriately within the browser container.
    */
   setPosition() {
@@ -569,10 +645,9 @@ var SidebarUI = {
    * none if the argument is an empty string.
    */
   selectMenuItem(commandID) {
-    for (let [id, { menuId, triggerButtonId }] of this.sidebars) {
+    for (let [id, { menuId }] of this.sidebars) {
       let menu = document.getElementById(menuId);
-      let triggerbutton =
-        triggerButtonId && document.getElementById(triggerButtonId);
+      let triggerbutton = document.getElementById("sidebar-icon-" + id);
       if (id == commandID) {
         menu.setAttribute("checked", "true");
         if (triggerbutton) {
@@ -599,3 +674,6 @@ XPCOMUtils.defineLazyPreferenceGetter(
   true,
   SidebarUI.setPosition.bind(SidebarUI)
 );
+
+
+
